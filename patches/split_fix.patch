--- wordninja.py	2024-11-16 14:29:01.787107311 +0000
+++ wordninja.py	2024-11-16 14:55:40.790425872 +0000
@@ -33,12 +33,15 @@
     self._wordcost = dict((k, log((i+1)*log(len(words)))) for i,k in enumerate(words))
     self._maxword = max(len(x) for x in words)
    
-
   def split(self, s):
     """Uses dynamic programming to infer the location of spaces in a string without spaces."""
-    l = [self._split(x) for x in _SPLIT_RE.split(s)]
-    return [item for sublist in l for item in sublist]
-
+    punctuations = _SPLIT_RE.findall(s)
+    texts = _SPLIT_RE.split(s)
+    assert len(punctuations) + 1 == len(texts)
+    new_texts = [self._split(x) for x in texts]
+    for i, punctuation in enumerate(punctuations):
+      new_texts.insert(2*i+1, punctuation)
+    return [item for sublist in new_texts for item in sublist]
 
   def _split(self, s):
     # Find the best match for the i first characters, assuming cost has
